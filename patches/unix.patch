diff --git a/System/Posix/Files/Common.hsc b/System/Posix/Files/Common.hsc
index a1a4278..03f2797 100644
--- a/System/Posix/Files/Common.hsc
+++ b/System/Posix/Files/Common.hsc
@@ -520,7 +520,7 @@ foreign import ccall unsafe "fchown"
 -- Note: calls @ftruncate@.
 setFdSize :: Fd -> FileOffset -> IO ()
 setFdSize (Fd fd) off =
-  throwErrnoIfMinus1_ "setFdSize" (c_ftruncate fd off)
+  throwErrnoIfMinus1_ "setFdSize" (c_ftruncate fd (fromIntegral off))
 
 -- -----------------------------------------------------------------------------
 -- pathconf()/fpathconf() support
diff --git a/System/Posix/IO/Common.hsc b/System/Posix/IO/Common.hsc
index a838352..8e7e317 100644
--- a/System/Posix/IO/Common.hsc
+++ b/System/Posix/IO/Common.hsc
@@ -281,7 +281,7 @@ mode2Int SeekFromEnd  = (#const SEEK_END)
 -- | May throw an exception if this is an invalid descriptor.
 fdSeek :: Fd -> SeekMode -> FileOffset -> IO FileOffset
 fdSeek (Fd fd) mode off =
-  throwErrnoIfMinus1 "fdSeek" (Base.c_lseek fd off (mode2Int mode))
+  throwErrnoIfMinus1 "fdSeek" (fmap fromIntegral $ Base.c_lseek fd (fromIntegral off) (mode2Int mode))
 
 -- -----------------------------------------------------------------------------
 -- Locking
diff --git a/System/Posix/Process/Internals.hs b/System/Posix/Process/Internals.hs
index 0bd99ae..4a69c6d 100644
--- a/System/Posix/Process/Internals.hs
+++ b/System/Posix/Process/Internals.hs
@@ -1,5 +1,6 @@
 {-# LANGUAGE CApiFFI #-}
 {-# LANGUAGE Trustworthy #-}
+{-# LANGUAGE CPP #-}
 
 module System.Posix.Process.Internals (
        pPrPr_disableITimers, c_execvpe,
@@ -9,7 +10,12 @@ import Foreign
 import Foreign.C
 import System.Exit
 import System.IO.Error
+
+#ifdef ghcjs_HOST_OS
+type Signal = CInt
+#else
 import GHC.Conc (Signal)
+#endif
 
 -- | The exit status of a process
 data ProcessStatus
diff --git a/System/Posix/Signals.hsc b/System/Posix/Signals.hsc
index 971973e..feaa248 100644
--- a/System/Posix/Signals.hsc
+++ b/System/Posix/Signals.hsc
@@ -349,11 +349,13 @@ installHandler :: Signal
                -> Maybe SignalSet       -- ^ other signals to block
                -> IO Handler            -- ^ old handler
 
-#ifdef __PARALLEL_HASKELL__
+##if defined(__PARALLEL_HASKELL__)
 installHandler =
   error "installHandler: not available for Parallel Haskell"
-#else
-
+##elif defined(ghcjs_HOST_OS)
+installHandler =
+  error "installHandler: not available for GHCJS"
+##else
 installHandler sig handler _maybe_mask = do
   ensureIOManagerIsRunning  -- for the threaded RTS
 
@@ -441,7 +443,7 @@ unmarshalSigInfo fp = do
         siginfoError  = Errno errno,
         siginfoSpecific = extra }
 
-#endif /* !__PARALLEL_HASKELL__ */
+##endif /* !__PARALLEL_HASKELL__ */
 
 -- -----------------------------------------------------------------------------
 -- Alarms
