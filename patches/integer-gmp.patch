diff --git a/GHC/Integer/GMP/Prim.hs b/GHC/Integer/GMP/Prim.hs
index 45d1348..7e86589 100644
--- a/GHC/Integer/GMP/Prim.hs
+++ b/GHC/Integer/GMP/Prim.hs
@@ -197,6 +197,10 @@ foreign import ccall unsafe "hs_integerToWord64"
 #endif
 
 -- used to be primops:
+#ifdef __GHCJS__
+foreign import prim "integer_cmm_integer2Intzh" integer2Int#
+  :: Int# -> ByteArray# -> Int#
+#else
 integer2Int# :: Int# -> ByteArray# -> Int#
 integer2Int# s d = if s ==# 0#
                        then 0#
@@ -204,6 +208,7 @@ integer2Int# s d = if s ==# 0#
                             if s <# 0#
                                then negateInt# v
                                else v
+#endif
 
 integer2Word# :: Int# -> ByteArray# -> Word#
 integer2Word# s d = int2Word# (integer2Int# s d)
diff --git a/GHC/Integer/Logarithms/Internals.hs b/GHC/Integer/Logarithms/Internals.hs
index daa4ac9..b580915 100644
--- a/GHC/Integer/Logarithms/Internals.hs
+++ b/GHC/Integer/Logarithms/Internals.hs
@@ -23,7 +23,7 @@ import GHC.Integer.Type
 
 -- When larger word sizes become common, add support for those,
 -- it is not hard, just tedious.
-#if (WORD_SIZE_IN_BITS != 32) && (WORD_SIZE_IN_BITS != 64)
+#if ((WORD_SIZE_IN_BITS != 32) && (WORD_SIZE_IN_BITS != 64)) || __GHCJS__
 
 -- Less than ideal implementations for strange word sizes
 
diff --git a/GHC/Integer/Type.lhs b/GHC/Integer/Type.lhs
index bf76aea..f32a8a4 100644
--- a/GHC/Integer/Type.lhs
+++ b/GHC/Integer/Type.lhs
@@ -267,9 +267,15 @@ gcdInteger a@(S# INT_MINBOUND) b = gcdInteger (toBig a) b
 gcdInteger a b@(S# INT_MINBOUND) = gcdInteger a (toBig b)
 gcdInteger (S# a) (S# b) = S# (gcdInt a b)
 gcdInteger ia@(S# a)  ib@(J# sb b)
- =      if a  ==# 0# then absInteger ib
-   else if sb ==# 0# then absInteger ia
-   else                   S# (gcdIntegerInt# absSb b absA)
+ = if a ==# 0#
+   then absInteger ib
+#ifdef __GHCJS__
+   else if cmpIntegerInt# sb b 0# ==# 0#
+#else
+   else if sb ==# 0#
+#endif
+          then absInteger ia
+          else S# (gcdIntegerInt# absSb b absA)
        where !absA  = if a  <# 0# then negateInt# a  else a
              !absSb = if sb <# 0# then negateInt# sb else sb
 gcdInteger ia@(J# _ _) ib@(S# _) = gcdInteger ib ia
@@ -419,7 +425,13 @@ instance Ord Integer where
 absInteger :: Integer -> Integer
 absInteger (S# INT_MINBOUND) = NEG_INT_MINBOUND
 absInteger n@(S# i) = if i >=# 0# then n else S# (negateInt# i)
+#ifdef __GHCJS__
+absInteger n@(J# s d) = if cmpIntegerInt# s d 0# <# 0#
+                          then negateInteger n
+                          else n
+#else
 absInteger n@(J# s d) = if (s >=# 0#) then n else J# (negateInt# s) d
+#endif
 
 {-# NOINLINE signumInteger #-}
 signumInteger :: Integer -> Integer
@@ -472,7 +484,14 @@ timesInteger (J# s1 d1) (J# s2 d2) = case timesInteger# s1 d1 s2 d2 of
 negateInteger :: Integer -> Integer
 negateInteger (S# INT_MINBOUND) = NEG_INT_MINBOUND
 negateInteger (S# i)            = S# (negateInt# i)
+#ifdef __GHCJS__
+negateInteger (J# s d)          = case int2Integer# 0# of
+                                    (# zs, zd #) ->
+                                      case minusInteger# zs zd s d of
+                                        (# s', d' #) -> J# s' d'
+#else
 negateInteger (J# s d)          = J# (negateInt# s) d
+#endif
 \end{code}
 
 
diff --git a/integer-gmp.cabal b/integer-gmp.cabal
index 2a76ef6..6b0bd24 100644
--- a/integer-gmp.cabal
+++ b/integer-gmp.cabal
@@ -15,6 +15,7 @@ extra-source-files:
   cbits/float.c
   cbits/alloc.c
   cbits/longlong.c
+  cbits/gmp-wrappers.cmm
 
 source-repository head
     type:     git
@@ -31,6 +32,7 @@ Library {
     extensions: CPP, MagicHash, UnboxedTuples, NoImplicitPrelude,
                 ForeignFunctionInterface, UnliftedFFITypes
     c-sources: cbits/cbits.c
+               cbits/gmp-wrappers.cmm
     -- We need to set the package name to integer-gmp
     -- (without a version number) as it's magic.
     ghc-options: -package-name integer-gmp
