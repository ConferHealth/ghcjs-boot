diff --git a/System/Time.hsc b/System/Time.hsc
index 8074783..89a9d82 100644
--- a/System/Time.hsc
+++ b/System/Time.hsc
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 #if __GLASGOW_HASKELL__ >= 701
 {-# LANGUAGE Trustworthy #-}
 #endif
@@ -230,6 +231,17 @@ realToInteger ct = round (realToFrac ct :: Double)
   -- so we must convert to Double before we can round it
 
 getClockTime :: IO ClockTime
+##ifdef ghcjs_HOST_OS
+type Timeval_tv_sec = Int
+type Timeval_tv_usec = Int
+
+getClockTime = do
+  allocaBytes 8 $ \ p_timeval -> do
+    throwErrnoIfMinus1_ "getClockTime" $ gettimeofday p_timeval nullPtr
+    sec  <- peekByteOff p_timeval 0 :: IO Timeval_tv_sec
+    usec <- peekByteOff p_timeval 4 :: IO Timeval_tv_usec
+    return (TOD (realToInteger sec) ((realToInteger usec) * 1000000))
+##else
 #ifdef __HUGS__
 getClockTime = do
   (sec,usec) <- getClockTimePrim
@@ -266,6 +278,7 @@ getClockTime = do
     return (TOD (realToInteger secs) 0)
 
 #endif
+##endif
 
 -- -----------------------------------------------------------------------------
 -- | @'addToClockTime' d t@ adds a time difference @d@ and a
@@ -357,6 +370,10 @@ normalizeTimeDiff td =
 
 zone   :: Ptr CTm -> IO (Ptr CChar)
 gmtoff :: Ptr CTm -> IO CLong
+##ifdef ghcjs_HOST_OS
+zone x      = peekByteOff x 36
+gmtoff x    = peekByteOff x 40
+##else
 #if HAVE_TM_ZONE
 zone x      = (#peek struct tm,tm_zone) x
 gmtoff x    = (#peek struct tm,tm_gmtoff) x
@@ -407,6 +424,7 @@ gmtoff x = do
   return (- (if dst then tz - 3600 else tz))
 # endif /* ! HAVE_DECL_ALTZONE */
 #endif  /* ! HAVE_TM_ZONE */
+##endif
 #endif /* ! __HUGS__ */
 
 -- -----------------------------------------------------------------------------
@@ -416,6 +434,9 @@ gmtoff x = do
 -- 'toCalendarTime' is in the 'IO' monad.
 
 toCalendarTime :: ClockTime -> IO CalendarTime
+##ifdef ghcjs_HOST_OS
+toCalendarTime =  clockToCalendarTime_reentrant (_throwAwayReturnPointer localtime_r) False
+##else
 #ifdef __HUGS__
 toCalendarTime =  toCalTime False
 #elif HAVE_LOCALTIME_R
@@ -423,11 +444,15 @@ toCalendarTime =  clockToCalendarTime_reentrant (_throwAwayReturnPointer localti
 #else
 toCalendarTime =  clockToCalendarTime_static localtime False
 #endif
+##endif
 
 -- | converts an internal clock time into a 'CalendarTime' in standard
 -- UTC format.
 
 toUTCTime :: ClockTime -> CalendarTime
+##ifdef ghcjs_HOST_OS
+toUTCTime      = unsafePerformIO . clockToCalendarTime_reentrant (_throwAwayReturnPointer gmtime_r) True
+##else
 #ifdef __HUGS__
 toUTCTime      =  unsafePerformIO . toCalTime True
 #elif HAVE_GMTIME_R
@@ -435,6 +460,7 @@ toUTCTime      =  unsafePerformIO . clockToCalendarTime_reentrant (_throwAwayRet
 #else
 toUTCTime      =  unsafePerformIO . clockToCalendarTime_static gmtime True
 #endif
+##endif
 
 #ifdef __HUGS__
 toCalTime :: Bool -> ClockTime -> IO CalendarTime
@@ -464,6 +490,15 @@ _throwAwayReturnPointer :: (Ptr CTime -> Ptr CTm -> IO (Ptr CTm))
                         -> (Ptr CTime -> Ptr CTm -> IO (       ))
 _throwAwayReturnPointer fun x y = fun x y >> return ()
 
+##ifdef ghcjs_HOST_OS
+clockToCalendarTime_reentrant :: (Ptr CTime -> Ptr CTm -> IO ()) -> Bool -> ClockTime
+         -> IO CalendarTime
+clockToCalendarTime_reentrant fun is_utc (TOD secs psec) = do
+  with (fromIntegral secs :: CTime)  $ \ p_timer -> do
+    allocaBytes 44 $ \ p_tm -> do
+      fun p_timer p_tm
+      clockToCalendarTime_aux is_utc p_tm psec
+##else
 #if !HAVE_LOCALTIME_R || !HAVE_GMTIME_R
 clockToCalendarTime_static :: (Ptr CTime -> IO (Ptr CTm)) -> Bool -> ClockTime
          -> IO CalendarTime
@@ -482,9 +517,23 @@ clockToCalendarTime_reentrant fun is_utc (TOD secs psec) = do
       fun p_timer p_tm
       clockToCalendarTime_aux is_utc p_tm psec
 #endif
+##endif
 
 clockToCalendarTime_aux :: Bool -> Ptr CTm -> Integer -> IO CalendarTime
 clockToCalendarTime_aux is_utc p_tm psec = do
+##ifdef ghcjs_HOST_OS
+    sec    <- peekByteOff p_tm 0  :: IO CInt
+    minute <- peekByteOff p_tm 4  :: IO CInt
+    hour   <- peekByteOff p_tm 8  :: IO CInt
+    mday   <- peekByteOff p_tm 12 :: IO CInt
+    mon    <- peekByteOff p_tm 16 :: IO CInt
+    year   <- peekByteOff p_tm 20 :: IO CInt
+    wday   <- peekByteOff p_tm 24 :: IO CInt
+    yday   <- peekByteOff p_tm 28 :: IO CInt
+    isdst  <- peekByteOff p_tm 32 :: IO CInt
+    zone'  <- zone p_tm
+    tz     <- gmtoff p_tm
+##else
     sec   <-  (#peek struct tm,tm_sec  ) p_tm :: IO CInt
     minute <-  (#peek struct tm,tm_min  ) p_tm :: IO CInt
     hour  <-  (#peek struct tm,tm_hour ) p_tm :: IO CInt
@@ -496,7 +545,7 @@ clockToCalendarTime_aux is_utc p_tm psec = do
     isdst <-  (#peek struct tm,tm_isdst) p_tm :: IO CInt
     zone' <-  zone p_tm
     tz    <-  gmtoff p_tm
-
+##endif
     tzname' <- peekCString zone'
 
     let month  | mon >= 0 && mon <= 11 = toEnum (fromIntegral mon)
@@ -545,6 +594,16 @@ toClockTime (CalendarTime year mon mday hour minute sec psec
         error "Time.toClockTime: timezone offset out of range"
     else
       unsafePerformIO $ do
+##ifdef ghcjs_HOST_OS
+      allocaBytes 44 $ \p_tm -> do
+        pokeByteOff p_tm 0  (fromIntegral sec  :: CInt)
+        pokeByteOff p_tm 4  (fromIntegral minute :: CInt)
+        pokeByteOff p_tm 8  (fromIntegral hour :: CInt)
+        pokeByteOff p_tm 12 (fromIntegral mday :: CInt)
+        pokeByteOff p_tm 16 (fromIntegral (fromEnum mon) :: CInt)
+        pokeByteOff p_tm 20 (fromIntegral year - 1900 :: CInt)
+        pokeByteOff p_tm 28 isDst
+##else
       allocaBytes (#const sizeof(struct tm)) $ \ p_tm -> do
         (#poke struct tm,tm_sec  ) p_tm (fromIntegral sec  :: CInt)
         (#poke struct tm,tm_min  ) p_tm (fromIntegral minute :: CInt)
@@ -553,6 +612,7 @@ toClockTime (CalendarTime year mon mday hour minute sec psec
         (#poke struct tm,tm_mon  ) p_tm (fromIntegral (fromEnum mon) :: CInt)
         (#poke struct tm,tm_year ) p_tm (fromIntegral year - 1900 :: CInt)
         (#poke struct tm,tm_isdst) p_tm isDst
+##endif
         t <- throwIf (== -1) (\_ -> "Time.toClockTime: invalid input")
                 (mktime p_tm)
         --
@@ -730,6 +790,19 @@ formatTimeDiff l fmt (TimeDiff year month day hour minute sec _)
 
 type CTm = () -- struct tm
 
+##ifdef ghcjs_HOST_OS
+type CTimeVal = ()
+type CTimeZone = ()
+foreign import ccall unsafe "HsTime.h __hscore_gettimeofday"
+    gettimeofday :: Ptr CTimeVal -> Ptr CTimeZone -> IO CInt
+foreign import ccall unsafe "HsTime.h __hscore_localtime_r"
+    localtime_r :: Ptr CTime -> Ptr CTm -> IO (Ptr CTm)
+foreign import ccall unsafe "HsTime.h __hscore_gmtime_r"
+    gmtime_r    :: Ptr CTime -> Ptr CTm -> IO (Ptr CTm)
+foreign import ccall unsafe "time.h mktime"
+    mktime      :: Ptr CTm   -> IO CTime
+##else
+
 #if HAVE_LOCALTIME_R
 foreign import ccall unsafe "HsTime.h __hscore_localtime_r"
     localtime_r :: Ptr CTime -> Ptr CTm -> IO (Ptr CTm)
@@ -762,4 +835,5 @@ foreign import ccall unsafe "time.h ftime" ftime :: Ptr CTimeB -> IO ()
 #else
 foreign import ccall unsafe "time.h time" time :: Ptr CTime -> IO CTime
 #endif
+##endif
 #endif /* ! __HUGS__ */
